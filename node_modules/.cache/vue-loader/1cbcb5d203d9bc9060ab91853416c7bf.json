{"remainingRequest":"/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/index.js!/Users/wangjunxia/work-github/dj-design/node_modules/vue-markdown-loader/lib/markdown-compiler.js??ref--15-1!/Users/wangjunxia/work-github/dj-design/docs/json.md?vue&type=template&id=3101037f&","dependencies":[{"path":"/Users/wangjunxia/work-github/dj-design/docs/json.md","mtime":1673509764266},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655712169000},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/index.js","mtime":1655715099000},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/vue-markdown-loader/lib/markdown-compiler.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}