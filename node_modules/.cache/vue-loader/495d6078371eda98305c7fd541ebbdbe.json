{"remainingRequest":"/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wangjunxia/work-github/dj-design/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangjunxia/work-github/dj-design/packages/progress/src/progress.vue?vue&type=template&id=229ee406&scoped=true&","dependencies":[{"path":"/Users/wangjunxia/work-github/dj-design/packages/progress/src/progress.vue","mtime":1673509764346},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655712169000},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangjunxia/work-github/dj-design/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}